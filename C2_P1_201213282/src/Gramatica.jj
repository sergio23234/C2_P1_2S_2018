
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 10;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Gramatica)

public class Gramatica {
		NArbol Gramatica(String arg[]){ 
   		try
    {
     System.out.println("entro");
     Gramatica parser = new Gramatica(System.in);
     return parser.Inicio() ;
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
      return null;
    }	  
  }
  }

}

PARSER_END(Gramatica)
SKIP:{
" "
|"\t"
|"\n"
|"\r"
}
TOKEN:
{
  	<MAS:"+">
 |	<MEN:"-">
 |	<POR:"*">
 |	<ELV:"^">
 |	<IGU:"=">
 |	<PAI:"(">
 |	<PAF:")">
 |	<AND:"&&">
 |	<OR:"||">
 |	<ARR:"@">  	
 |      <NOT:"!">
 |	<NOR:"<"> 
 |	<MAY:">">
 |      <PUN:".">
 |      <R_fin:"»$">
 |	<MOD:"mod">
 |	<DIV:"div">
}
TOKEN:{

}

TOKEN :{
<R_tip:"Tipo«$">
<R_idp:"idpregunta«$">
<R_eti:"etiqueta«$">
<R_par:"parametro«$">
<R_cal:"calculo«$">
<R_apl:"aplicable«$">
<R_sug:"sugerir«$">
<R_res:"restringir«$">
<R_req:"requerido«$">
<R_rsm:"restringirmsn«$">
<R_rqm:"requeridomsn«$">
<R_prd"predeterminado«$">
<R_rep:"repeticion«$">
<R_apa:"apariencia«$">
<R_pre:"codigo_pre«$">
<R_pos:"codigo_post«$">
}
TOKEN :{
<R_OP:"Opcion">
<C_VF:"V_F">
<C_SN:"S_N">
<R_OF:"Finalizar">
<R_OI:"Iniciar">
<R_CMIN:"Cad_min">
<R_CMAX:"Cad_max">
<R_CFIL:"Cad_fil">
<R_Text:"Texto">
<R_Ente:"Entero">
<R_Deci:"Decimal">
<R_Rang:"Rango">
<R_Cond:"Condicion">
<R_Fech:"Fecha">
<R_Hora:"Hora">
<R_FeHo:"FechaHora">
<R_Selu:"Seleccion_uno">
<R_Selm:"Seleccion_multiples">
<R_Nota:"Nota">
<R_Mult:"Fichero">
<R_Calc:"Calcular">
<R_AgrI:"Iniciar agrupacion">
<R_AgrF:"Finalizar agrupacion">
<R_Cici:"Iniciar Ciclo">
<R_Cicf:"Finalizar Ciclo">
}
TOKEN :{
    
    <T_ID:<LETTER>(<LETTER>|<DIGIT>|"_"|"-"|".")*>
|   <#LETTER: (["a"-"z","A"-"Z"])>
|   <INTEGER: (<DIGIT>)+>
|   <DOUBLE: (<DIGIT>)+"."(<DIGIT>)+>
|   <#DIGIT: ["0"-"9"]>
|   <T_Texto:~["$»","«$","@{","@["."}@"]>
}
NArbol Inicio(): 
{NArbol arbol=new NArbol(); }
{
	arbol=Contenido(){return arbol;}
}
void Contenido() ://Inicio del Cuerpo Tipo
{   NArbol arbol = new NArbol();
    NArbol arbol1 = new NArbol();
    NArbol arbol2 = new NArbol();}
{
<R_tip>arbol1=Cuerpo_Tipo(){} Est_ID(arbol1) ContenidoP()
}
NArbol ContenidoP():
{NArbol arbol = new NArbol();}
{
<R_tip>Cuerpo_Tipo() Est_ID() ContenidoP()
|<EOF>
}
/*--------------- Cuerpo Tipo---------------- */
String Cuerpo_Tipo():
{String valor ="";
 token val = new token();}
{
 val=<R_Text><R_fin>    {return val.ini;}
|val=<R_Ente><R_fin>    {return val.ini;}
|val=<R_Deci><R_fin>    {return val.ini;}
|val=<R_Rang><R_fin>    {return val.ini;}
|val=<R_Cond><R_fin>    {return val.ini;}
|val=<R_Fech><R_fin>    {return val.ini;}
|val=<R_Hora><R_fin>    {return val.ini;}
|val=<R_FeHo><R_fin>    {return val.ini;}
|val=<R_Selu><R_fin>    {return val.ini;}
|val=<R_Selm><R_fin>    {return val.ini;}
|val=<R_Nota><R_fin>    {return val.ini;}
|val=<R_Mult><R_fin>    {return val.ini;}
|val=<R_Calc><R_fin>    {return val.ini;}
|val=<R_AgrI><R_fin>    {return val.ini;}
|val=<R_AgrF><R_fin>    {return val.ini;}
|val=<R_Cici><R_fin>    {return val.ini;}
|val=<R_Cicf><R_fin>    {return val.ini;}
}
/*--------------- Estructura ID---------------- */
NArbol Est_ID(NArbol actual):
{NArbol arbol = new NArbol();
    String ID ="";}
{
  <R_idp> ID=Cuerpo_ID()   Est_eti()
}
String Cuerpo_ID(NArbol actual):
{token ID = "";}
{
    ID=<T_ID><R_fin>{return token.;}
}
/*--------------- Estructura etiqueta---------------- */
NArbol Est_eti():
{NArbol arbol = new NArbol();}
{
  <R_eti> Cuerpo_Eti() Est_param()
}
String Cuerpo_Eti():
{String Etiqueta ="";}
{
 <R_ID> <R_fin>
|<R_fin>
}
/*--------------- Estructura PARAMETRO---------------- */
NArbol Est_param(): //
{NArbol arbol = new NArbol();}
{
<R_par>Cuerpo_param() Est_cacular
}
String Cuerpo_param()
{String param="";}
{
// No se 
 <R_OP> <IGU> PARAM1()// Opcion  = Param1()
|<R_OI> <IGU> EXP_AR() PARAM2()// Iniciar = EXP
|<R_OF> <IGU> EXP_AR() PARAM2_1()// Finalizar = EXP
|<R_fin>
}
String PARAM2()
{String resultado="";}
{
 <R_OF> <IGU> EXP_AR()
|<EOF>
}
String PARAM2_1(){
String resultado="";}
{
 <R_OI> <IGU> EXP_AR()
|<EOF>
}
NArbol Est_calcular(): //calcular
{NArbol arbol = new NArbol();}
{
<R_cal>Cuerpo_calcular() Est_aplicable
}

NArbol Est_aplicable() //aplicable
{NArbol arbol = new NArbol();}
{
<R_apl>Cuerpo_apli() Est_sugerir()
}
NArbol Est_sugerir() //sugerir
{NArbol arbol = new NArbol();}
{
<R_sug>Cuerpo_suger() Est_restrin()
}
NArbol Est_restrin() //sugerir
{NArbol arbol = new NArbol();}
{
<R_res>Cuerpo_requerido() Est_requerido()
}
NArbol Est_requerido() //requerido
{NArbol arbol = new NArbol();}
{
<R_req>Cuerpo_requerido() Est_restrimen() 
}
NArbol Est_restrimen() //restringir mensaje 
{NArbol arbol = new NArbol();}
{
<R_rsm>Cuerpo_resmensaje() Est_resquemen()
}
NArbol Est_resquemen() //requerido mensaje 
{NArbol arbol = new NArbol();}
{
<R_rqm>Cuerpo_requemen() Est_predeter()
}
NArbol Est_predeter() //predeterminado 
{NArbol arbol = new NArbol();}
{
<R_prd> Cuerpo_prede() Est_repetir()
}
NArbol Est_repetir() //repeticion 
{NArbol arbol = new NArbol();}
{
<R_rep>Cuerpo_repetir() Est_aparencia()
}
NArbol Est_aparencia() //apariencia 
{NArbol arbol = new NArbol();}
{
<R_apa>Cuerpo_aparien() Est_codigoPRE
}
NArbol Est_codigoPRE() //codigo pre 
{NArbol arbol = new NArbol();}
{
<R_pre>Cuerpo_pre() Est_codigoPOST
}
NArbol Est_codigoPOST() //codigo post
{NArbol arbol = new NArbol();}
{
<R_pos>Cuerpo_post()
}
/*---------------------Operaciones Aritmeticas---------------------- */
String EXP_AR(): //SUMA Y RESTA
{String resultado="";
 String var1="";}
{
  var1=Est_MD() resultado=EXP_ARP()    {return var1+resultado;}
}
String EXP_ARP():
{String resultado="";
 String var1="";}
{
  <MAS> var1=Est_MD() resultado=EXP_ARP()   {var1="+"+var1; return var1+resultado;}
| <MEN> var1=Est_MD() resultado=EXP_ARP()   {var1="-"+var1; return var1+resultado;}
| <EOF>                                     {return "";}
}
String Est_MD(): //MULTIPLICACION Y DIVISION
{   String resultado="";
    String var1="";}
{
  var1=Est_ID() resultado=Est_MDP(){return var1+resultado;}
}
String Est_MDP():
{String resultado="";
 String var1="";}
{
  <POR> var1=Est_ID() resultado=EXP_ARP()   {var1="*"+var1; return var1+resultado;}
| <DIV> var1=Est_ID() resultado=EXP_ARP()   {var1="/"+var1; return var1+resultado;}
| <MOD> var1=Est_ID() resultado=EXP_ARP()   {var1="%"+var1; return var1+resultado;}
| <EOF>                                     {return "";}
}
String Est_ID():
{String resultado="";}
{
   <PAI>EXP_AR<PAF>
|   Var_ID()
}
/*---------------------Operaciones de Logias---------------------- */
String EXP_LOG(): //AND y OR
{   String resultado="";
    String var1="";}{
  var1=Est_NOT() resultado=EXP_LOGP()     {return var1+resultado;}
}
String EXP_LOGP():
{   String resultado="";
    String var1="";}
{
  <AND> var1=Est_NOT() resultado=EXP_LOGP()   {resultado="&&"+var1+resultado; return resultado;}
| <OR>  var1=Est_NOT() resultado=EXP_LOGP()   {resultado="||"+var1+resultado; return resultado;}
| <EOF>                                         {return "";}
}
String Est_NOT(): //NOT
{String resultado="";}
{
    <NOT> resultado=EXP_LOG() {return "!"+resultado;}
|   resultado=EXP_COMP()        {return resultado;}
}
/*---------------------Operaciones de Comparadores---------------------- */
String EXP_COMP(): //AND y OR
{String resultado="";
    String var1="";}
{
  resultado=EXP_COMP3() var1=EXP_COMPP()    {return resultado+var1;}
}
String EXP_COMPP():
{   String resultado="";
    String var1="";
    String var2="";
    String var3=""; }
{
  <IGU> EXP_COMP3() EXP_COMPP()                         {resultado = "=="+var2+var3; return resultado;}
| <NOT><IGU> var2=EXP_COMP3() var3=EXP_COMPP()          {resultado = "!="+var2+var3; return resultado;}
| <NOR>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res ="<"+var1; resultado = pre_res+var2+var3; return resultado;}
| <MAY>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res =">"+var1; resultado = pre_res+var2+var3; return resultado;}
| <EOF>                                                 {return "";}
}
String COMP2():{}
{   
    <IGU>   {return "=";}
|   <EOF>   {return "";}
}
String EXP_COMP3(): //NOT
{String resultado="";}
{
  resultado=EXP_AR()            {return resultado;}  
}