
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 100;
  STATIC = false;
  IGNORE_CASE =true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Gramatica)
import java.util.Stack;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Gramatica {
    Stack<Nodo_Arbol> Pila = new Stack();
    Nodo_Arbol primero = new Nodo_Arbol();
    public void Gramatica(String arg){ 
    try{
     System.out.println("entro");
     primero.set_ID("~$RAIZ~$");
     Gramatica parser = new Gramatica(new BufferedReader(new FileReader("path.txt")));
     parser.Inicio(primero);
    }
    catch(FileNotFoundException e)
    {
        
      System.out.println(e.getMessage());
      
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
    }
    catch(ParseException e){
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
        System.out.println(e.getMessage()+"1\n"+e.currentToken+"2\n"+e.eol+"3\n");
    }
  }
  }

PARSER_END(Gramatica)

TOKEN:
{
  	<MAS:"+">
 |	<MEN:"-">
 |	<POR:"*">
 |	<ELV:"^">
 |	<IGU:"=">
 |	<PAI:"(">
 |	<PAF:")">
 |	<AND:"&&">
 |	<OR:"||">  	
 |      <NOT:"!">
 |	<NOR:"<"> 
 |	<MAY:">">
 |      <DPUN:"..">
 |      <PUN:".">
 |	<MOD:"mod">
 |	<DIV:"div">
 |	<ARR:"@">
 |	<NCO:"#">
 |      <CORI:"[">
 |      <COR:"]">
 |      <R_fin:"@[/]@">
}
SKIP:{
"\ufeff"
|"\r"
|"\n"
|"\u00a0"
|" "
|"\f"
|"\t"
}
TOKEN :{
<R_MIMG:"Media_imagen">
|<R_CMIN:"cad_min">
|<R_CMAX:"cad_max">
|<R_CFIL:"cad_fila">
|<R_MVID:"Media_video">
|<R_MAUD:"Media_audio">
|<R_repro:"reproduccion">
|<R_OP:"Opcion">
|<C_VF:"V_F">
|<C_SN:"S_N">
|<TRUE:"verdadero">
|<FALSE:"falso">
|<R_OF:"Finalizar">
|<R_OI:"Iniciar">
|<R_Text:"Texto">
|<R_Ente:"Entero">
|<R_Deci:"Decimal">
|<R_Rang:"Rango">
|<R_Cond:"Condicion">
|<R_Fech:"Fecha">
|<R_Hora:"Hora">
|<R_FeHo:"FechaHora">
|<R_Selu:"Seleccion_uno">
|<R_Selm:"Seleccion_multiples">
|<R_Nota:"Nota">
|<R_Mult:"Fichero">
|<R_Calc:"Calcular">
|<R_AgrI:"Iniciar agrupacion">
|<R_AgrF:"Finalizar agrupacion">
|<R_Cici:"Iniciar Ciclo">
|<R_Cicf:"Finalizar Ciclo">
|<R_tip:"@[tipo]@">
|<R_idp:"@[idpregunta]@">
|<R_eti:"@[etiqueta]@">
|<R_par:"@[parametro]@">
|<R_cal:"@[calculo]@">
|<R_apl:"@[aplicable]@">
|<R_sug:"@[sugerir]@">
|<R_res:"@[restringir]@">
|<R_req:"@[requerido]@">
|<R_rsm:"@[restringirmsn]@">
|<R_rqm:"@[requeridomsn]@">
|<R_prd:"@[predeterminado]@">
|<R_rep:"@[repeticion]@">
|<R_mul:"@[multimedia]@">
|<R_lec:"@[lectura]@">
|<R_apa:"@[apariencia]@">
|<R_pre:"@[codigo_pre]@">
|<R_pos:"@[codigo_post]@">
|    <ESPACIO: ( "\t" |" "|"\f")+>
|   <#LETTER: (["a"-"z","A"-"Z"])>
|   <INTEGER: (<DIGIT>)+>
|   <DOUBLE: (<DIGIT>)+<PUN>(<DIGIT>)+>
|   <#DIGIT: ["0"-"9"]>
|   <T_ID:(<LETTER>(<LETTER>|<DIGIT>|"_"|"-"|<PUN>)*)>
|   <T_MUL:"\""(<PUN>(<LETTER>)+)(","<PUN>(<LETTER>)+)*"\"">
|   <T_Texto2:"@\"@">:T_Texto1
}
<T_Texto1> SKIP:
{
"\r"
|"\n"
|"\t"
|"\f"
|"\u00a0"
|"\ufeff"
}
<T_Texto1> TOKEN:
{
<T_Texto:(~["@",".","#","[","]","\n","\t"])+>
|<T_var:"#["(<LETTER>(<LETTER>|<DIGIT>|"_"|"-"|<PUN>)*)"]">
|<T_Coma:"@\"@">:DEFAULT
}
<T_Texto1> MORE:
{
<~["@",".","#","[","]"," "]>
}



Nodo_Arbol Inicio(Nodo_Arbol arbol): 
{}
{
	Contenido(arbol){return arbol;}
}
void Contenido(Nodo_Arbol arbol) ://Inicio del Cuerpo Tipo
{   Nodo_Arbol arbol_1 = new Nodo_Arbol();}
{
{Pila.push(arbol);} ContenidoP(arbol) (ContenidoP(arbol))*{}
//<R_tip>Inicial_Cont(arbol_1){if(arbol_1.get_anidado()!=0){arbol.Add_Nodo_Arbol(arbol_1); if(arbol_1.get_anidado()==1){Pila.push(arbol); ContenidoP(arbol_1);}else{ContenidoP(Pila.pop());}} } 
}

void ContenidoP(Nodo_Arbol arbol):
{Nodo_Arbol arbol_1 = new Nodo_Arbol();}
{
//<R_tip>Inicial_Cont(arbol_1){if(arbol_1.get_anidado()!=0){arbol.Add_Nodo_Arbol(arbol_1); if(arbol_1.get_anidado()==1){Pila.push(arbol); ContenidoP(arbol_1);}else{ContenidoP(Pila.pop());}} } 
<R_tip>Inicial_Cont(arbol_1){Pila.peek().Add_Nodo_Arbol(arbol_1);
if(arbol_1.get_anidado()!=0){     
    if(arbol_1.get_anidado()==1){
        Pila.push(arbol_1); 
        ContenidoP(Pila.peek());
    }
    else if(arbol_1.get_anidado()<0){
        System.out.println("salida");
        ContenidoP(Pila.pop());} }
} 
}
void Inicial_Cont(Nodo_Arbol arbol):
{}
{
Cuerpo_Tipo(arbol) Estruct_ID(arbol){}
}
/*--------------- Cuerpo Tipo---------------- */
void Cuerpo_Tipo(Nodo_Arbol actual):
{String valor ="";
 Token val;}
{
 val=<R_Text><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Ente><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Deci><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Rang><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Cond><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Fech><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Hora><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_FeHo><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Selu><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Selm><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Nota><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_Mult> {actual.set_tipo(val.image);} Cuerpo_mul(actual)<R_fin>       { }
|val=<R_Calc><R_fin>                                                        {actual.set_tipo(val.image); }
|val=<R_AgrI><R_fin>                                                        {actual.set_tipo(val.image); actual.set_agrupacion(1);}
|val=<R_AgrF><R_fin>                                                        {actual.set_tipo(val.image); actual.set_agrupacion(-1);}
|val=<R_Cici><R_fin>                                                        {actual.set_tipo(val.image); actual.set_ciclo(1);}
|val=<R_Cicf><R_fin>                                                        {actual.set_tipo(val.image); actual.set_ciclo(-1);}
}
void Cuerpo_mul(Nodo_Arbol actual):
{Token t;}
{
t=<T_MUL>   {actual.Set_fichero(t.image);}
|<EOF>      {}
}
/*--------------- Estructura ID---------------- */
void Estruct_ID(Nodo_Arbol actual):
{}
{
  <R_idp> Cuerpo_ID(actual) Est_eti(actual)
}

void Cuerpo_ID(Nodo_Arbol actual):
{Token ID;}
{
    ID=<T_ID> <R_fin>{String imagen = ID.image; actual.set_ID(imagen);}
}
/*--------------- Estructura etiqueta---------------- */
void Est_eti(Nodo_Arbol actual):
{String etiqueta="";}
{
  <R_eti> etiqueta=Etiqueta_ET()<R_fin> {actual.Set_etiqueta(etiqueta);} Est_param(actual)
}

/*--------------- Estructura PARAMETRO---------------- */
void Est_param(Nodo_Arbol actual): //
{Token t;}
{
t=<R_par> Cuerpo_param(actual) Est_calcular(actual)
}
void Cuerpo_param(Nodo_Arbol actual):
{String Respuesta="";
    Token t;}
{
<R_fin>    {}
|t=<R_OP>     <IGU>   PARAM1(actual)                                   // Opcion  = Param1(){}
|t=<R_OI>     <IGU>   Respuesta=EXP_AR(){actual.add_rango_min(Respuesta); }     (PARAM2(actual))+// Iniciar = EXP
|t=<R_OF>     <IGU>   Respuesta=EXP_AR(){actual.add_rango_max(Respuesta); }     (PARAM2(actual))+// Finalizar = EXP
|t=<R_CMIN>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_min(Respuesta);   }     (PARAM3(actual))+// C_min = num 
|t=<R_CMAX>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_max(Respuesta);   }     (PARAM3(actual))+// C_max = num
|t=<R_CFIL>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_fil(Respuesta);   }     (PARAM3(actual))+// C_FIl = num
}

//parametro1 V_F o S_N
void PARAM1(Nodo_Arbol actual):
{}
{
    <C_SN><R_fin>{actual.add_opc(1);}
|   <C_VF><R_fin>{actual.add_opc(0);}
}

void PARAM2(Nodo_Arbol actual):
{String resultado="";}
{
 <R_OF> <IGU> resultado=EXP_AR(){actual.add_rango_max(resultado);} PARAM2(actual)
|<R_OI> <IGU> resultado=EXP_AR(){actual.add_rango_min(resultado);} PARAM2(actual)
|<R_fin>  
}
//parametro de texto
void PARAM3(Nodo_Arbol actual):
{String resultado ="";}
{
 <R_CMIN><IGU> resultado=EXP_AR(){actual.add_cad_min(resultado);} 
|<R_CMAX><IGU> resultado=EXP_AR(){actual.add_cad_max(resultado);} 
|<R_CFIL><IGU> resultado=EXP_AR(){actual.add_cad_fil(resultado);} 
|<R_fin>{}
}

/*------------------------OPERACION CALCULAR-----------------------------------*/
void Est_calcular(Nodo_Arbol actual): //calcular
{}
{
<R_cal>Cuerpo_calcular(actual) Est_aplicable(actual)
}
void Cuerpo_calcular(Nodo_Arbol actual):
{String resultado="";}
{
 resultado=EXP_LOG(){actual.Set_calcular(resultado);}
| <R_fin>           {}
}
/*------------------------OPERACION Aplicable-----------------------------------*/
void Est_aplicable(Nodo_Arbol actual): //aplicable
{}
{
<R_apl>Cuerpo_apli(actual) Est_sugerir(actual)
}
void Cuerpo_apli(Nodo_Arbol actual):
{String resultado="";}
{
resultado=EXP_COMP()<R_fin>{actual.set_aplicable(resultado);}
|<R_fin>
}
/*------------------------OPERACION Sugerir-----------------------------------*/
void Est_sugerir(Nodo_Arbol actual): //sugerir
{}
{
<R_sug>Cuerpo_suger(actual) Est_restrin(actual)
}
void Cuerpo_suger(Nodo_Arbol actual):
{String mensaje="";}
{
 mensaje=Etiqueta_ET()  <R_fin>  {actual.set_sugerir(mensaje);}
|<R_fin>                         {}
}
/*------------------------OPERACION Restringir-----------------------------------*/
void Est_restrin(Nodo_Arbol actual): //restringir
{}
{
<R_res>Cuerpo_restringir(actual) Est_requerido(actual)
}
void Cuerpo_restringir(Nodo_Arbol actual):
{String resultado="";}
{
 resultado=EXP_COMP()   {actual.set_restringir(resultado);}
|<R_fin>                {}
}
/*------------------------OPERACION Requerido-----------------------------------*/
void Est_requerido(Nodo_Arbol actual): //requerido
{}
{
<R_req>Cuerpo_requerido(actual) Est_restrimen(actual) 
}
void Cuerpo_requerido(Nodo_Arbol actual):
{}
{
 <TRUE><R_fin>      {actual.set_requerido();}
|<FALSE><R_fin>     {}
|<R_fin>    {}
}
/*------------------------OPERACION Restringir mensaje-----------------------------------*/
void Est_restrimen(Nodo_Arbol actual): //restringir mensaje 
{}
{
<R_rsm>Cuerpo_resmensaje(actual) Est_resquemen(actual)
}
void Cuerpo_resmensaje(Nodo_Arbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_men_rest(mensaje);}
|<R_fin>                        {}
}
/*------------------------OPERACION Requerido mensaje-----------------------------------*/
void Est_resquemen(Nodo_Arbol actual): //requerido mensaje 
{}
{
    <R_rqm>cuerpo_requemen(actual) Est_predeter(actual)
}
void cuerpo_requemen(Nodo_Arbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_men_reque(mensaje);}
|<R_fin>{}
}
/*------------------------OPERACION Predeterminado-----------------------------------*/
void Est_predeter(Nodo_Arbol actual): //predeterminado 
{}
{
<R_prd> Cuerpo_prede(actual) Est_repetir(actual)
}
void Cuerpo_prede(Nodo_Arbol actual):
{String resultado=""; Token t;}
{
resultado=EXP_LOG() <R_fin>   {actual.set_predeterminado(resultado);}
|t=<T_ID><PAI><PAF> <R_fin>  {actual.set_predeterminado(t.image+"()");}
|<R_fin>                        {}
}
/*------------------------OPERACION repetir-----------------------------------*/
void Est_repetir(Nodo_Arbol actual): //repeticion 
{}
{
<R_rep>Cuerpo_repetir(actual) Est_apariencia(actual)
}
void Cuerpo_repetir(Nodo_Arbol actual):{
String resultado="";}
{
  resultado = EXP_AR()  {actual.add_repetir(resultado);}
| <R_fin>               {}
}
/*------------------------OPERACION apariencia-----------------------------------*/
void Est_apariencia(Nodo_Arbol actual): //apariencia 
{}
{
<R_apa>Cuerpo_aparien(actual) Est_Lectura(actual)
}
void Cuerpo_aparien(Nodo_Arbol actual):
{Token t;}
{
t=<T_ID><R_fin> {actual.set_apariencia(t.image);}
|<R_fin>         {}
}
/*------------------------OPERACION lectura-----------------------------------*/
void Est_Lectura(Nodo_Arbol actual):
{}
{
<R_lec> Cuerpo_lectura(actual) Est_multimed(actual)
}
void Cuerpo_lectura(Nodo_Arbol actual):{
String resultado="";
}
{
  <TRUE>                <R_fin> {actual.Set_lectura("verdadero");}
| <FALSE>               <R_fin> {actual.Set_lectura("falso");}
| resultado=EXP_AR()    <R_fin> {actual.Set_lectura(resultado);}
| <R_fin>                       {}
}
/*------------------------OPERACION multimedia-----------------------------------*/
void Est_multimed(Nodo_Arbol actual):{
}
{
<R_mul>Cuerpo_multimed(actual) Est_codigoPRE(actual)
}
void Cuerpo_multimed(Nodo_Arbol actual):
{String resultado="";
 Token t;}
{
 <R_MIMG>t=<T_MUL>{actual.Set_multimedia(t.image,0);}                         Cuerpo_multimed(actual)
|<R_MAUD>t=<T_MUL>{actual.Set_multimedia(t.image,0);}                         Cuerpo_multimed(actual)
|<R_MVID>t=<T_MUL>{actual.Set_multimedia(t.image,0);}                         Cuerpo_multimed(actual)
|<R_repro><IGU> resultado=Cuerpo_RE(actual){actual.Set_automul(resultado);}   Cuerpo_multimed(actual)       
|<R_fin>             {}
}
String Cuerpo_RE(Nodo_Arbol actual):
{}
{
<TRUE>      {return "verdadero";}
|<FALSE>    {return "falso";}
}
/*------------------------OPERACION Codigo PRE-----------------------------------*/
void Est_codigoPRE(Nodo_Arbol actual): //codigo pre 
{}
{
<R_pre>Cuerpo_pre(actual) Est_codigoPOST(actual)
}
void Cuerpo_pre(Nodo_Arbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_codigoPRE(mensaje);}
|<R_fin>                        {}
}
void Est_codigoPOST(Nodo_Arbol actual): //codigo post
{}
{
<R_pos>Cuerpo_post(actual)
}
void Cuerpo_post(Nodo_Arbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_codigoPOS(mensaje);}
|<R_fin>                        {}
}
/*---------------------Operaciones Aritmeticas---------------------- */
String EXP_AR(): //SUMA Y RESTA
{String resultado="";
 String var1="";}
{
  var1=Est_MD() (resultado=EXP_ARP(){var1=var1+resultado;})*    {return var1;}
}
String EXP_ARP():
{String resultado="";
 String var1="";}
{
  <MAS> var1=Est_MD() {var1="+"+var1; return var1;}
| <MEN> var1=Est_MD() {var1="-"+var1; return var1;}
}
String Est_MD(): //MULTIPLICACION Y DIVISION
{   String resultado="";
    String var1="";}
{
  var1=Est_ID() (resultado=Est_MDP(){var1= var1+resultado;})* {return var1;}
}
String Est_MDP():
{String resultado="";
 String var1="";}
{
  <POR> var1=Est_ID()   {var1="*"+var1; return var1;}
| <DIV> var1=Est_ID()   {var1="/"+var1; return var1;}
| <MOD> var1=Est_ID()   {var1="%"+var1; return var1;}
}
String Est_ID():
{String resultado="";}
{
   <PAI>resultado=EXP_AR()<PAF>{return "("+resultado+")";}
|   resultado=Var_ID(){return resultado;}
}
/*---------------------Operaciones de Logias---------------------- */
String EXP_LOG(): //AND y OR
{   String resultado="";
    String var1="";}{
  var1=Est_NOT() (resultado=EXP_LOGP() {var1=var1+resultado;})* {return var1;}
}
String EXP_LOGP():
{   String resultado="";
    String var1="";}
{
  <AND> var1=Est_NOT()      {resultado="&&"+var1; return resultado;}
| <OR>  var1=Est_NOT()      {resultado="||"+var1; return resultado;}
}
String Est_NOT(): //NOT
{String resultado="";}
{
    <NOT> resultado=EXP_LOG() {return "!"+resultado;}
|   resultado=EXP_COMP()        {return resultado;}
}
/*---------------------Operaciones de Comparadores---------------------- */
String EXP_COMP(): //AND y OR
{String resultado="";
    String var1="";}
{
  resultado=EXP_COMP3() var1=EXP_COMPP()    {return resultado+var1;}
}
String EXP_COMPP():
{   String resultado="";
    String var1="";
    String var2="";
    String var3=""; }
{
  <IGU> EXP_COMP3() EXP_COMPP()                         {resultado = "=="+var2+var3; return resultado;}
| <NOT><IGU> var2=EXP_COMP3() var3=EXP_COMPP()          {resultado = "!="+var2+var3; return resultado;}
| <NOR>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res ="<"+var1; resultado = pre_res+var2+var3; return resultado;}
| <MAY>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res =">"+var1; resultado = pre_res+var2+var3; return resultado;}
| <EOF>                                                 {return "";}
}
String COMP2():{}
{   
    <IGU>   {return "=";}
|   <EOF>   {return "";}
}
String EXP_COMP3(): //NOT
{String resultado="";}
{
  resultado=EXP_AR()            {return resultado;}  
}
/*---------------------Propuesta de ID---------------------- */
String Etiqueta_ET() :
{String Cad;String total="";}
{
  total = T() Cad=Etiqueta_ET1(){ total = total+Cad; return total;} 
}
String Etiqueta_ET1() :
{String Cad;String total="";}
{
 Cad = T() (total= Etiqueta_ET1(){total=Cad+total;})*{return total;}
|<T_Coma>{return "";}
}
//total=Etiqueta_ET1()
String T() :
{Token t;
}
{
 <T_Texto2> t = <T_Texto>{return t.image + " ";}
|t=<T_var> {return t.image + " ";}
|<PUN> {return "yo ";}
|<DPUN> {return "padre";}
|t=<INTEGER>{return t.image;}
|t=<DOUBLE>  {return t.image;}
|<ESPACIO>{return " ";}
}
/*------------------------VAR ID---------------------------------*/
String Var_ID():{
Token t;
String var;
}
{
   var=T()     {return var;}  
}