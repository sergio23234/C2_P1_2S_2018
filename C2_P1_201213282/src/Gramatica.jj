
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Gramatica)

public class Gramatica {
		NArbol Gramatica(String arg[]){ 
   		try
    {
     System.out.println("entro");
     Gramatica parser = new Gramatica(System.in);
     return parser.Inicio() ;
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
      return null;
    }	  
  }
  }

}

PARSER_END(Gramatica)
SKIP:{
" "
|"\t"
|"\n"
|"\r"
}
TOKEN:
{
  	<MAS:"+">
 |	<MEN:"-">
 |	<POR:"*">
 |	<ELV:"^">
 |	<IGU:"=">
 |	<PAI:"(">
 |	<PAF:")">
 |	<AND:"&&">
 |	<OR:"||">
 |	<ARR:"@">  	
 |      <NOT:"!">
 |	<NOR:"<"> 
 |	<MAY:">">
 |      <PUN:".">
 |      <R_fin:"»$">
 |	<MOD:"mod">
 |	<DIV:"div">
}
TOKEN:{

}

TOKEN :{
<R_tip:"Tipo«$">
<R_idp:"idpregunta«$">
<R_eti:"etiqueta«$">
<R_par:"parametro«$">
<R_cal:"calculo«$">
<R_apl:"aplicable«$">
<R_sug:"sugerir«$">
<R_res:"restringir«$">
<R_req:"requerido«$">
<R_rsm:"restringirmsn«$">
<R_rqm:"requeridomsn«$">
<R_prd"predeterminado«$">
<R_rep:"repeticion«$">
<R_apa:"apariencia«$">
<R_pre:"codigo_pre«$">
<R_pos:"codigo_post«$">
}
TOKEN :{
<R_Text:"Texto">
<R_Ente:"Entero">
<R_Deci:"Decimal">
<R_Rang:"Rango">
<R_Cond:"Condicion">
<R_Fech:"Fecha">
<R_Hora:"Hora">
<R_FeHo:"FechaHora">
<R_Selu:"Seleccion_uno">
<R_Selm:"Seleccion_multiples">
<R_Nota:"Nota">
<R_Mult:"Fichero">
<R_Calc:"Calcular">
<R_AgrI:"Iniciar agrupacion">
<R_AgrF:"Finalizar agrupacion">
<R_Cici:"Iniciar Ciclo">
<R_Cicf:"Finalizar Ciclo">
}
TOKEN :{
    
    <T_ID:<LETTER>(<LETTER>|<DIGIT>|"_"|"-"|".")*>
|   <#LETTER: (["a"-"z","A"-"Z"])>
|   <INTEGER: (<DIGIT>)+>
|   <DOUBLE: (<DIGIT>)+"."(<DIGIT>)+>
|   <#DIGIT: ["0"-"9"]>
|   <T_Texto:~["$»","«$","@{","@["."}@"]>
}
NArbol Inicio(): 
{NArbol arbol=new NArbol(); }
{
	arbol=Contenido(){return arbol;}
}
void Contenido() ://Inicio del Cuerpo Tipo
{   NArbol arbol = new NArbol();
    NArbol arbol1 = new NArbol();
    NArbol arbol2 = new NArbol();}
{
<R_tip>arbol1=Cuerpo_Tipo(){} Est_ID(arbol1) ContenidoP()
}
NArbol ContenidoP():
{NArbol arbol = new NArbol();}
{
<R_tip>Cuerpo_Tipo() Est_ID() ContenidoP()
|<EOF>
}
/*--------------- Cuerpo Tipo---------------- */
NArbol Cuerpo_Tipo():
{NArbol arbol = new NArbol();
 Boolean Error =false;
String valor ="";}
{
 valor=<R_Text><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Ente><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Deci><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Rang><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Cond><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Fech><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Hora><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_FeHo><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Selu><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Selm><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Nota><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Mult><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Calc><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_AgrI><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_AgrF><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Cici><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|valor=<R_Cicf><R_fin>{arbol.Tipo =valor; arbol.Error = false;  return arbol;}
|<R_fin>{arbol.Error = true; return arbol;}
}
/*--------------- Estructura ID---------------- */
NArbol Est_ID(NArbol actual):
{NArbol arbol = new NArbol();}
{
  <R_idp> Cuerpo_ID()   Est_eti()
  
}
String Cuerpo_ID():
{String ID = "";}
{
    ID=<T_ID><R_fin>{arbol.Error = true; return arbol;}
|   <R_fin>{arbol.Error = true; return arbol;}
}
NArbol Est_eti():
{NArbol arbol = new NArbol();}
{
  <R_eti> Cuerpo_Eti() Est_param()
}
String Cuerpo_Eti():
{String Etiqueta ="";}
{
 <R_ID> <R_fin>
|<R_fin>
}
NArbol Est_param(): //
{NArbol arbol = new NArbol();}
{
<R_par>Cuerpo_param() Est_cacular
}
String Cuerpo_param()
{String param="";}
{
// No se 

|<R_fin>
}
NArbol Est_calcular(): //calcular
{NArbol arbol = new NArbol();}
{
<R_cal>Cuerpo_calcular() Est_aplicable
}

NArbol Est_aplicable() //aplicable
{NArbol arbol = new NArbol();}
{
<R_apl>Cuerpo_apli() Est_sugerir()
}
NArbol Est_sugerir() //sugerir
{NArbol arbol = new NArbol();}
{
<R_sug>Cuerpo_suger() Est_restrin()
}
NArbol Est_restrin() //sugerir
{NArbol arbol = new NArbol();}
{
<R_res>Cuerpo_requerido() Est_requerido()
}
NArbol Est_requerido() //requerido
{NArbol arbol = new NArbol();}
{
<R_req>Cuerpo_requerido() Est_restrimen() 
}
NArbol Est_restrimen() //restringir mensaje 
{NArbol arbol = new NArbol();}
{
<R_rsm>Cuerpo_resmensaje() Est_resquemen()
}
NArbol Est_resquemen() //requerido mensaje 
{NArbol arbol = new NArbol();}
{
<R_rqm>Cuerpo_requemen() Est_predeter()
}
NArbol Est_predeter() //predeterminado 
{NArbol arbol = new NArbol();}
{
<R_prd> Cuerpo_prede() Est_repetir()
}
NArbol Est_repetir() //repeticion 
{NArbol arbol = new NArbol();}
{
<R_rep>Cuerpo_repetir() Est_aparencia()
}
NArbol Est_aparencia() //apariencia 
{NArbol arbol = new NArbol();}
{
<R_apa>Cuerpo_aparien() Est_codigoPRE
}
NArbol Est_codigoPRE() //codigo pre 
{NArbol arbol = new NArbol();}
{
<R_pre>Cuerpo_pre() Est_codigoPOST
}
NArbol Est_codigoPOST() //codigo post
{NArbol arbol = new NArbol();}
{
<R_pos>Cuerpo_post()
}
/*---------------------Operaciones Aritmeticas---------------------- */
String Est_SR(): //SUMA Y RESTA
{String resultado="";}{
  Est_MD() Est_SRP()
}
String Est_SRP():
{String resultado="";}{
  <MAS> Est_MD() Est_SRP()
| <MEN> Est_MD() Est_SRP()
| <EOF>
}
String Est_MD(): //MULTIPLICACION Y DIVISION
{String resultado="";}{
  Est_ID() Est_MDP()
}
String Est_MDP():
{String resultado="";}{
  <POR> Est_ID() Est_SRP()
| <DIV> Est_ID() Est_SRP()
| <EOF>
}
String Est_ID():
{String resultado="";}
{
    <PAI>Est_SR<PAF>
|   Var_ID()
}
/*---------------------Operaciones de Logias---------------------- */
String Est_ANDOR(): //AND y OR
{String resultado="";}{
  Est_NOT() Est_ANDORP()
}
String Est_ANDORP():
{String resultado="";}{
  <AND> Est_NOT() Est_ANDORP()
| <OR>  Est_NOT() Est_ANDORP()
| <EOF>
}
String Est_NOT(): //NOT
{String resultado="";}{
    <NOT> Est_ANDOR()
|   Est_COMP() 
}
/*---------------------Operaciones de Comparadores---------------------- */
String Est_COMP(): //AND y OR
{String resultado="";}{
  Est_COMP3() Est_COMPP()
}
String Est_COMPP():
{String resultado="";}{
  <IGU><IGU> Est_COMP3() Est_ANDORP()
| <NOT><IGU> Est_COMP3() Est_ANDORP()
| <NOR>COMP2() Est_COMP3() Est_ANDORP()
| <MAY>COMP2() Est_COMP3() Est_ANDORP()
| <EOF>
}
String COMP2():{
String resultado="";}
{
<IGU>
|<EOF>
}
String Est_NOT(): //NOT
{String resultado="";}{
    <NOT> Est_ANDOR()
|   Est_COMP() 
}