
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 10;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Gramatica)

public class Gramatica {
    
		NArbol Gramatica(String arg[]){ 
   		try
    {
     System.out.println("entro");
     Nodo_Arbol primero = new Nodo_Arbol();
     primero.set_ID("«RAIZ»");
     Gramatica parser = new Gramatica(System.in);
     parser.Inicio(primero);
    return  primero;
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
      return null;
    }	  
  }
  }

}

PARSER_END(Gramatica)
SKIP:{
" "
|"\t"
|"\n"
|"\r"
}
TOKEN:
{
  	<MAS:"+">
 |	<MEN:"-">
 |	<POR:"*">
 |	<ELV:"^">
 |	<IGU:"=">
 |	<PAI:"(">
 |	<PAF:")">
 |	<AND:"&&">
 |	<OR:"||">  	
 |      <NOT:"!">
 |	<NOR:"<"> 
 |	<MAY:">">
 |      <DPUN:"..">
 |      <PUN:".">
 |      <R_fin:"»$">
 |	<MOD:"mod">
 |	<DIV:"div">
 |	<ARR:"@[">
 |	<NCO:"#[">
 |      <COR:"]">
}
TOKEN:{

}

TOKEN :{
<R_tip:"Tipo«$">
<R_idp:"idpregunta«$">
<R_eti:"etiqueta«$">
<R_par:"parametro«$">
<R_cal:"calculo«$">
<R_apl:"aplicable«$">
<R_sug:"sugerir«$">
<R_res:"restringir«$">
<R_req:"requerido«$">
<R_rsm:"restringirmsn«$">
<R_rqm:"requeridomsn«$">
<R_prd"predeterminado«$">
<R_rep:"repeticion«$">
<R_mul:"multimedia«$">
<R_lec:"lectura«$">
<R_apa:"apariencia«$">
<R_pre:"codigo_pre«$">
<R_pos:"codigo_post«$">
}
TOKEN :{
<R_MIMG:"Media_imagen">
<R_MVID:"Media_video">
<R_MAUD:"Media_audio">
<R_OP:"Opcion">
<C_VF:"V_F">
<C_SN:"S_N">
<TRUE:"verdadero">
<FALSE:"falso">
<R_OF:"Finalizar">
<R_OI:"Iniciar">
<R_CMIN:"Cad_min">
<R_CMAX:"Cad_max">
<R_CFIL:"Cad_fil">
<R_Text:"Texto">
<R_Ente:"Entero">
<R_Deci:"Decimal">
<R_Rang:"Rango">
<R_Cond:"Condicion">
<R_Fech:"Fecha">
<R_Hora:"Hora">
<R_FeHo:"FechaHora">
<R_Selu:"Seleccion_uno">
<R_Selm:"Seleccion_multiples">
<R_Nota:"Nota">
<R_Mult:"Fichero">
<R_Calc:"Calcular">
<R_AgrI:"Iniciar agrupacion">
<R_AgrF:"Finalizar agrupacion">
<R_Cici:"Iniciar Ciclo">
<R_Cicf:"Finalizar Ciclo">
}
TOKEN :{
    <T_ID:<LETTER>(<LETTER>|<DIGIT>|"_"|"-"|<PUN>)*>
|   <#LETTER: (["a"-"z","A"-"Z"])>
|   <INTEGER: (<DIGIT>)+>
|   <DOUBLE: (<DIGIT>)+<PUN>(<DIGIT>)+>
|   <#DIGIT: ["0"-"9"]>
|   <T_MUL:"\""(<PUN>(<LETTER>)+)(","<PUN>(<LETTER>)+)*"\"">
|   <T_Texto:~["$»","«$","#[","@[",".",".."]>
}
NArbol Inicio(): 
{NArbol arbol=new NArbol(); }
{
	arbol=Contenido(){return arbol;}
}
NArbol Contenido() ://Inicio del Cuerpo Tipo
{   NArbol arbol = new NArbol();}
{
<R_tip>arbol1=Cuerpo_Tipo(arbol) Est_ID(arbol){} ContenidoP()
}
NArbol ContenidoP():
{NArbol arbol = new NArbol();}
{
<R_tip>Cuerpo_Tipo(arbol) Est_ID(arbol){}ContenidoP()
|<EOF>
}
/*--------------- Cuerpo Tipo---------------- */
String Cuerpo_Tipo(NArbol actual):
{String valor ="";
 token val;}
{
 val=<R_Text><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Ente><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Deci><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Rang><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Cond><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Fech><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Hora><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_FeHo><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Selu><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Selm><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Nota><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_Mult> {actual.set_tipo(val.image);} valor=Cuerpo_mul(actual)<R_fin> {return "true";}
|val=<R_Calc><R_fin>                                                        {actual.set_tipo(val.image); return "true";}
|val=<R_AgrI><R_fin>                                                        {actual.set_tipo(val.image); actual.set_agrupacion(true);return "true";}
|val=<R_AgrF><R_fin>                                                        {actual.set_tipo(val.image); actual.set_agrupacion(false);return "true";}
|val=<R_Cici><R_fin>                                                        {actual.set_tipo(val.image); actual.set_ciclo(true);return "true";}
|val=<R_Cicf><R_fin>                                                        {actual.set_tipo(val.image); actual.set_ciclo(false);return "true";}
}
void Cuerpo_mul(actual):
{Token t;}
{
t=<T_mul>   {actual.Set_fichero(t.image);}
|<EOF>      {System.out.println("vacio");}
}
/*--------------- Estructura ID---------------- */
void Est_ID(NArbol actual):
{}
{
  <R_idp> Cuerpo_ID(actual) Est_eti(actual){}
}

void Cuerpo_ID(NArbol actual):
{token ID;}
{
    ID=<T_ID><R_fin>{actual.set_ID(token.image);}
}
/*--------------- Estructura etiqueta---------------- */
void Est_eti():
{String etiqueta="";}
{
  <R_eti> etiqueta=Etiqueta_ET(){actual.Set_etiqueta(etiqueta);} Est_param(actual)
}

/*--------------- Estructura PARAMETRO---------------- */
void Est_param(NArbol actual): //
{}
{
<R_par> Cuerpo_param(actual) Est_cacular(actual)
}
void Cuerpo_param(NArbol actual):
{String Respuesta="";}
{
 <R_OP>     <IGU>   PARAM1(NArbol actual)                                   // Opcion  = Param1(){}
|<R_OI>     <IGU>   Respuesta=EXP_AR(){actual.add_rango_min(resultado);}    PARAM2(NArbol actual)// Iniciar = EXP
|<R_OF>     <IGU>   Respuesta=EXP_AR(){actual.add_rango_max(resultado);}    PARAM2_1(NArbol actual)// Finalizar = EXP
|<R_CMIN>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_min(resultado);}      PARAM3(NArbol actual)// C_min = num 
|<R_CMAX>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_max(resultado);}      PARAM3(NArbol actual)// C_max = num
|<R_CFIL>   <IGU>   Respuesta=EXP_AR(){actual.add_cad_fil(resultado);}      PARAM3(NArbol actual)// C_FIl = num
|<R_fin>    {}
}
//parametro1 V_F o S_N
void PARAM1(NArbol actual):
{}
{
    <C_SN>{actual.add_opc(1);}
|   <C_VF>{actual.add_opc(0);}
}
//parametro de rango
void PARAM2(NArbol actual):
{String resultado="";}
{
 <R_OF> <IGU> resultado=EXP_AR(){actual.add_rango_max(resultado);} PARAM2()
|<R_OI> <IGU> resultado=EXP_AR(){actual.add_rango_min(resultado);} PARAM2()
|<EOF>
}
//parametro de texto
void PARAM3(NArbol actual):
{String resultado ="";}
{
|<R_CMIN><IGU> resultado=EXP_AR(){actual.add_cad_min(resultado);} PARAM3()
|<R_CMAX><IGU> resultado=EXP_AR(){actual.add_cad_max(resultado);} PARAM3()
|<R_CFIL><IGU> resultado=EXP_AR(){actual.add_cad_fil(resultado);} PARAM3()
|<EOF>{}
}

/*------------------------OPERACION CALCULAR-----------------------------------*/
void Est_calcular(NArbol actual): //calcular
{}
{
<R_cal>Cuerpo_calcular(actual) Est_aplicable(actual)
}
void Cuerpo_calcular(NArbol actual):
{String resultado=""}
{
 resultado=EXP_LOG(){actual.Set_calcular(resultado);}
| <R_fin>           {}
}
/*------------------------OPERACION Aplicable-----------------------------------*/
void Est_aplicable(NArbol actual): //aplicable
{}
{
<R_apl>Cuerpo_apli(actual) Est_sugerir(actual)
}
void Cuerpo_apli(NArbol actual):
{String resultado="";}
{
resultado=EXP_COMP()<R_fin>{actual.set_aplicable(resultado);}
|<R_fin>
}
/*------------------------OPERACION Sugerir-----------------------------------*/
void Est_sugerir(NArbol actual): //sugerir
{}
{
<R_sug>Cuerpo_suger(actual) Est_restrin(actual)
}
void Cuerpo_suger():
{String mensaje="";}
{
 mensaje=Etiqueta_ET()  <R_fin>  {actual.set_sugerir(mensaje);}
|<R_fin>                         {}
}
/*------------------------OPERACION Restringir-----------------------------------*/
void Est_restrin(NArbol actual): //restringir
{}
{
<R_res>Cuerpo_restringir(actual) Est_requerido(actual)
}
void Cuerpo_restringir(NArbol actual):
{String resultado="";}
{
 resultado=EXP_COMP()   {actual.set_restringir(resultado);}
|<R_fin>                {}
}
/*------------------------OPERACION Requerido-----------------------------------*/
void Est_requerido(NArbol actual): //requerido
{}
{
<R_req>Cuerpo_requerido(actual) Est_restrimen(actual) 
}
void cuerpo_requerido(NArbol actual):
{}
{
 <TRUE>     {actual.set_requerido();}
|<FALSE>    {}
|<R_fin>    {}
}
/*------------------------OPERACION Restringir mensaje-----------------------------------*/
void Est_restrimen(NArbol actual): //restringir mensaje 
{}
{
<R_rsm>Cuerpo_resmensaje(actual) Est_resquemen(actual)
}
void cuerpo_resmensaje(NArbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_men_rest(mensaje);}
|<R_fin>                        {}
}
/*------------------------OPERACION Requerido mensaje-----------------------------------*/
void Est_resquemen(NArbol actual): //requerido mensaje 
{}
{
    <R_rqm>cuerpo_requemen(actual) Est_predeter(actual)
}
String cuerpo_requemen(NArbol actual):
{String mensaje="";}
{
mensaje=Etiqueta_ET()  <R_fin>  {actual.set_men_reque(mensaje);}
|<R_fin>{return "";}
}
/*------------------------OPERACION Predeterminado-----------------------------------*/
void Est_predeter(NArbol actual): //predeterminado 
{}
{
<R_prd> Cuerpo_prede() Est_repetir()
}
void Cuerpo_prede(NArbol actual):
{String resultado="";}
{
resultado=EXP_COND  {return resultado;}
|<EOF>              {return "";}
}
/*------------------------OPERACION repetir-----------------------------------*/
void Est_repetir(NArbol actual): //repeticion 
{}
{
<R_rep>Cuerpo_repetir() Est_apariencia()
}
void Cuerpo_repetir(NArbol actual):{
String resultado="";}
{
  resultado = EXP_AR(){return resultado;}
| <EOF>{return "";}
}
/*------------------------OPERACION apariencia-----------------------------------*/
void Est_apariencia(NArbol actual): //apariencia 
{}
{
<R_apa>Cuerpo_aparien() Est_Lectura()
}
void Cuerpo_aparien(NArbol actual):
{}
{
<EOF> {return "";}
}
/*------------------------OPERACION lectura-----------------------------------*/
void Est_Lectura(NArbol actual):
{}
{
<R_lec> Cuerpo_lectura() Est_multimed()
}
void Cuerpo_lectura(NArbol actual):{
String resultado="";
}
{
  <TRUE>                {return "verdadero";}
| <FALSE>               {return "falso";}
| resultado=EXP_AR()    {return resultado;}
| <EOF>                 {return "";}
}
/*------------------------OPERACION lectura-----------------------------------*/
void Est_multimed():{
}
{
<R_mul>Cuerpo_multimed() Est_codigoPRE()
}
String Cuerpo_multimed():
{String resultado="";}
{
 <R_MIMG><T_MUL>    {}
|<R_MAUD><T_MUL>    {}
|<R_MVID><T_MUL>    {}
|<EOF>              {return "";}
}
/*------------------------OPERACION Codigo PRE-----------------------------------*/
void Est_codigoPRE(): //codigo pre 
{NArbol arbol = new NArbol();}
{
<R_pre>Cuerpo_pre() Est_codigoPOST
}
void Est_codigoPOST() //codigo post
{NArbol arbol = new NArbol();}
{
<R_pos>Cuerpo_post()
}
/*---------------------Operaciones Aritmeticas---------------------- */
String EXP_AR(): //SUMA Y RESTA
{String resultado="";
 String var1="";}
{
  var1=Est_MD() resultado=EXP_ARP()    {return var1+resultado;}
}
String EXP_ARP():
{String resultado="";
 String var1="";}
{
  <MAS> var1=Est_MD() resultado=EXP_ARP()   {var1="+"+var1; return var1+resultado;}
| <MEN> var1=Est_MD() resultado=EXP_ARP()   {var1="-"+var1; return var1+resultado;}
| <EOF>                                     {return "";}
}
String Est_MD(): //MULTIPLICACION Y DIVISION
{   String resultado="";
    String var1="";}
{
  var1=Est_ID() resultado=Est_MDP(){return var1+resultado;}
}
String Est_MDP():
{String resultado="";
 String var1="";}
{
  <POR> var1=Est_ID() resultado=EXP_ARP()   {var1="*"+var1; return var1+resultado;}
| <DIV> var1=Est_ID() resultado=EXP_ARP()   {var1="/"+var1; return var1+resultado;}
| <MOD> var1=Est_ID() resultado=EXP_ARP()   {var1="%"+var1; return var1+resultado;}
| <EOF>                                     {return "";}
}
String Est_ID():
{String resultado="";}
{
   <PAI>EXP_AR<PAF>
|   Var_ID()
}
/*---------------------Operaciones de Logias---------------------- */
String EXP_LOG(): //AND y OR
{   String resultado="";
    String var1="";}{
  var1=Est_NOT() resultado=EXP_LOGP()     {return var1+resultado;}
}
String EXP_LOGP():
{   String resultado="";
    String var1="";}
{
  <AND> var1=Est_NOT() resultado=EXP_LOGP()   {resultado="&&"+var1+resultado; return resultado;}
| <OR>  var1=Est_NOT() resultado=EXP_LOGP()   {resultado="||"+var1+resultado; return resultado;}
| <EOF>                                         {return "";}
}
String Est_NOT(): //NOT
{String resultado="";}
{
    <NOT> resultado=EXP_LOG() {return "!"+resultado;}
|   resultado=EXP_COMP()        {return resultado;}
}
/*---------------------Operaciones de Comparadores---------------------- */
String EXP_COMP(): //AND y OR
{String resultado="";
    String var1="";}
{
  resultado=EXP_COMP3() var1=EXP_COMPP()    {return resultado+var1;}
}
String EXP_COMPP():
{   String resultado="";
    String var1="";
    String var2="";
    String var3=""; }
{
  <IGU> EXP_COMP3() EXP_COMPP()                         {resultado = "=="+var2+var3; return resultado;}
| <NOT><IGU> var2=EXP_COMP3() var3=EXP_COMPP()          {resultado = "!="+var2+var3; return resultado;}
| <NOR>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res ="<"+var1; resultado = pre_res+var2+var3; return resultado;}
| <MAY>var1=COMP2() var2=EXP_COMP3() var3=EXP_COMPP()   {String pre_res =">"+var1; resultado = pre_res+var2+var3; return resultado;}
| <EOF>                                                 {return "";}
}
String COMP2():{}
{   
    <IGU>   {return "=";}
|   <EOF>   {return "";}
}
String EXP_COMP3(): //NOT
{String resultado="";}
{
  resultado=EXP_AR()            {return resultado;}  

/*---------------------Propuesta de ID---------------------- */
String Etiqueta_ET() :
{String Cad;String total="";}
{
  (Cad = ETIQ() {System.out.println(Cad);String total = total+Cad;})+ <EOF>{return total;}
}
String ETIQ() :
{String Cad;
String aux;}
{
Cad = T() aux = ETIQ2() {Cad = Cad + aux;  return Cad;}
}

String ETIQ2() :
{String Cad;
String aux;}
{
 Cad = T() aux = ETQI2() {Cad = Cad + aux;  return Cad;}
| <EOF> {return "";}
}

String T() :
{Token t;}
{
t = <T_Texto> {return t.image + " ";}
|<NCO> t=<T_ID> <COR> {return t.image + " ";}
| <PUN> {return "yo ";}
| <DPUN> {return "padre";}
}
/*------------------------VAR ID---------------------------------*/
String Var_ID():{
Token t;
String var;
}
{
    t=<INTEGER> {return t.image;}
|   t=<DOUBLE>  {return t.image;}
|   var=T()     {return var;}  
}