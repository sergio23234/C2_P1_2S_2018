
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sergi
 */
public class Principal extends javax.swing.JFrame {

    private lista_celdas lista;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        Pesta.setEnabledAt(1, false);
        Pesta.setEnabledAt(2, false);
        super.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pesta = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Generar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu");

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        Generar.setBackground(new java.awt.Color(255, 255, 204));
        Generar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cargar.png"))); // NOI18N
        Generar.setText("Generar");
        Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(Generar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(281, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(Generar)
                .addContainerGap(360, Short.MAX_VALUE))
        );

        Pesta.addTab("Abrir", jPanel1);

        jPanel2.setBackground(new java.awt.Color(102, 204, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        Pesta.addTab("Guardar", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 204, 153));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        Pesta.addTab("Errores", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Pesta, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Pesta, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarActionPerformed
        // TODO add your handling code here:
        JFileChooser JFC = new JFileChooser();
        //filtro que muestra solo los archivos con extension *.edu
        JFC.setFileFilter(new FileNameExtensionFilter("todos los archivos *.xls", "xls", "XLS", "xlsx", "XLSX"));
        //se comprueba si se ha dado al boton aceptar
        int abrir = JFC.showDialog(null, "Abrir");
        if (abrir == JFileChooser.APPROVE_OPTION) {
            //abro el fichero y creo un BufferedReader para hacer
            String PATH = JFC.getSelectedFile().getAbsolutePath();
            if (PATH.toLowerCase().endsWith(".xls") || PATH.toLowerCase().endsWith(".xlsx")) {
                JOptionPane.showMessageDialog(this, "Reconocido" + PATH, "formato XLSX", JOptionPane.ERROR_MESSAGE);
                Leer_archivo(PATH);
            } else {
                JOptionPane.showMessageDialog(this, "Incorrecto:" + PATH, "Formato no es de excel", JOptionPane.ERROR_MESSAGE);
            }

        }


    }//GEN-LAST:event_GenerarActionPerformed
    
    public void Analizar() {
       Nodo_Arbol lista1 =lista.leer_lista();
       System.out.println("Resultado"+lista1.ID);
    }

    private void Leer_archivo(String path) {
        try {
            boolean errores = false;
            lista = new lista_celdas();
            FileInputStream file = new FileInputStream(new File(path));
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            XSSFSheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();
            Row row;
            boolean encabezado = false;
            int ordenado[] = new int[16];
            int total_columnas = 0;
            while (rowIterator.hasNext() && !errores) {
                row = rowIterator.next();
                if (!encabezado) {
                    Iterator<Cell> cellIterator = row.cellIterator();
                    Cell cell;
                    int contador = 0;
                    while (cellIterator.hasNext()) {
                        cell = cellIterator.next();
                        contador++;
                    }
                    total_columnas = contador;
                    if (contador > 16) {
                        System.out.println("hay columnas de mas");
                        errores = true;
                    } else if (contador < 3) {
                        System.out.println("tiene que venir 3 columnas como minimo");
                        errores = true;
                    } else {
                        cellIterator = row.cellIterator();
                        contador = 0;
                        while (cellIterator.hasNext()) {
                            cell = cellIterator.next();
                            ordenado[contador] = lista.comp_lista(cell.getStringCellValue());
                            contador++;
                        }
                    }
                    encabezado = true;
                } else {
                    boolean uno = lista.repetido();
                    boolean dos = lista.equivocada(total_columnas);
                    boolean tres = lista.minimo();
                    if (!uno && !dos && tres) {
                        Iterator<Cell> cellIterator = row.cellIterator();
                        Cell cell;
                        for (int i = 0; i < ordenado.length; i++) {
                            System.out.println(ordenado[i] + "i:" + i);
                        }
                        //se recorre cada celda
                        int contador = 0;
                        while (cellIterator.hasNext()) {
                            cell = cellIterator.next();
                            int num = ordenado[contador];
                            lista.add_lista(cell.getStringCellValue(), num);
                            contador++;
                        }
                    } else {
                        if (uno) {
                            System.out.println("Hay columnas repetidas");
                        } else if (dos) {
                            System.out.println("Hay columnas con nombres equivocados");
                        } else {
                            System.out.println("No estan las columnas minimas");
                        }
                        errores = true;
                    }

                }
            }
            if (!errores) {
                recorrer_lista();
                lista.escribir_lista();
                Analizar();
            }
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }

    public void recorrer_lista() {
        lista.llenar_Vacias();
        lista.recorrer_lista();
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generar;
    private javax.swing.JTabbedPane Pesta;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
