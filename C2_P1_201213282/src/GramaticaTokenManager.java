/* GramaticaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
import java.util.Stack;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;

/** Token Manager. */
@SuppressWarnings("unused")public class GramaticaTokenManager implements GramaticaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffffff000c000L) != 0L)
         {
            jjmatchedKind = 81;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fffffff000c000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x300000c000L) != 0L)
            return 1;
         if ((active0 & 0x7ffffcff0000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x11000000000000L) != 0L)
            return 1;
         if ((active0 & 0x7eeffcff0000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x2a48000000000L) != 0L)
            return 1;
         if ((active0 & 0x7ec5b4ff0000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x80800000000L) != 0L)
            return 1;
         if ((active0 & 0x7ee5347f0000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x54e414790000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 6;
            }
            return 1;
         }
         if ((active0 & 0x2a0120060000000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x50e414710000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x40000080000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0xc000710000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 8;
            }
            return 1;
         }
         if ((active0 & 0x502414000000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0xc000710000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0xc000410000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x300000000L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0xc000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x410000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 12;
            return 1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 1;
         return -1;
      case 13:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x8000000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 10);
      case 35:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0xf800000000100000L, 0x1fffL);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStopAtPos(0, 3);
      case 43:
         return jjStopAtPos(0, 1);
      case 45:
         return jjStopAtPos(0, 2);
      case 46:
         return jjStopAtPos(0, 13);
      case 60:
         return jjStopAtPos(0, 11);
      case 61:
         return jjStopAtPos(0, 5);
      case 62:
         return jjStopAtPos(0, 12);
      case 64:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 94:
         return jjStopAtPos(0, 4);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x404000e0000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000008000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x522818000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x280020000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x310004000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200400000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc002000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x5000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 160:
         return jjStopAtPos(0, 24);
      case 65279:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 38:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800000000100000L, active1, 0x1fffL);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x402080e0000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe944710000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x520010000008000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800a0000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x11400000004000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 64:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8022900800000000L, active1, 0x1800L);
      case 68:
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x3f0000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1280020000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c008000000000L, active1, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x500610000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000400000000L, active1, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004000000000L, active1, 0xbcL);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x810080000000000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 1);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0xe0000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 1);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0xc500010000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2c0020000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000404000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0xc080000000000L, active1, 0x2bcL);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x22800000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800100b10000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x401L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000040000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x102L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         break;
      case 65:
      case 97:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2004310000000L, active1, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L, active1, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2280420000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8500010000000000L, active1, 0x101L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100060000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 1);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000000L, active1, 0x80L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x28L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000080000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x14L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x310000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4280120040000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800c400000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000000L, active1, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x82L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000100a0000000L, active1, 0x1801L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000000000000L, active1, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x314L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x28L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000200000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000004000000000L, active1, 0x68L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xc400010000000L, active1, 0x500L);
      case 76:
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x280000000000000L, active1, 0x16L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000000400000000L, active1, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 1);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x500010000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000000000L, active1, 0L);
      case 35:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 59);
         break;
      case 65:
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x500010000000000L, active1, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000000000L, active1, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0x96L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0xc400000000000L, active1, 0x1800L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x2004000000000L, active1, 0x228L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1800L);
      case 65:
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000010000000L, active1, 0x200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000400000000L, active1, 0x80L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x140L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x28L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000000000L, active1, 0x414L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x500000000000000L, active1, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000000000000L, active1, 0L);
      case 93:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x202L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x128L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000010000000L, active1, 0x14L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000600000000L, active1, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(10, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(10, 65);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(10, 73);
         break;
      case 93:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x514L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x40L);
      case 79:
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000400000000L, active1, 0x10a8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(11, 61);
         break;
      case 93:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x9L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x500L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 34, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x80L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x14L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x88000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(12, 62);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(12, 64);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(12, 67);
         break;
      case 93:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0xd84L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 50, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(12, 57);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(13, 60);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(13, 66);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(13, 72);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(13, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(13, 75);
         break;
      case 93:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(14, 76);
         break;
      case 93:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10L);
      case 79:
      case 111:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(14, 58);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(15, 69);
         break;
      case 93:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(16, 68);
         break;
      case 93:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x40L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(17, 70);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(17, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 51, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(19, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x3900000L) != 0L)
            return 0;
         if ((active1 & 0x40000000L) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 86);
      case 10:
         return jjStopAtPos(0, 85);
      case 12:
         return jjStartNfaWithStates_1(0, 87, 0);
      case 13:
         return jjStartNfaWithStates_1(0, 84, 0);
      case 46:
         return jjStopAtPos(0, 93);
      case 64:
         return jjMoveStringLiteralDfa1_1(0x40000000L);
      case 160:
         return jjStartNfaWithStates_1(0, 88, 0);
      case 65279:
         return jjStartNfaWithStates_1(0, 89, 0);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa2_1(active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 64:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffbff6ffffffffL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0xffffbff7fffff9ffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0xffffbff7fffff9ffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(0); }
                  break;
               case 3:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 7:
                  { jjAddStates(11, 12); }
                  break;
               case 11:
                  if ((0xffffbff6ffffffffL & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if ((0xffffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0xffffffffd7fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 93 && kind > 91)
                     kind = 91;
                  break;
               case 6:
                  if (curChar == 123)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 8:
                  if (curChar == 64 && kind > 92)
                     kind = 92;
                  break;
               case 9:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if ((0xffffffffd7fffffeL & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(0); }
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(11, 12); }
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 95)
                     kind = 95;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 4, 5, 8, 5, 7, 8, 3, 4, 7, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\53", "\55", "\52", "\136", "\75", "\50", "\51", "\46\46", "\174\174", 
"\41", "\74", "\76", "\56", null, null, "\100", "\43", "\133", "\135", 
"\43\133\57\135\43", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\100\42\100", null, null, null, null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GramaticaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GramaticaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "T_Texto1",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff01fffffL, 0x7c0edfffL, 
};
static final long[] jjtoSkip = {
   0xfe00000L, 0x3f00000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x80000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[14];
    private final int[] jjstateSet = new int[2 * 14];

    
    protected char curChar;
}
