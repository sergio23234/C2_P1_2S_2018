/* GramaticaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
import java.util.Stack;
import java.io.BufferedReader;
import java.io.FileReader;

/** Token Manager. */
@SuppressWarnings("unused")public class GramaticaTokenManager implements GramaticaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x6000L) != 0L)
         {
            jjmatchedKind = 63;
            return 9;
         }
         if ((active0 & 0x1fffffffc600000L) != 0L)
         {
            jjmatchedKind = 57;
            return 15;
         }
         if ((active0 & 0x39ffcL) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x1fffffffc600000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 15;
         }
         if ((active0 & 0x6000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x180600000L) != 0L)
            return 15;
         if ((active0 & 0x1fffffe7c000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 15;
         }
         return -1;
      case 3:
         if ((active0 & 0x1fbbffe7c000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 15;
         }
         if ((active0 & 0x4400000000000L) != 0L)
            return 15;
         return -1;
      case 4:
         if ((active0 & 0x1fb16fa7c000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 4;
            }
            return 15;
         }
         if ((active0 & 0xa90400000000L) != 0L)
            return 15;
         return -1;
      case 5:
         if ((active0 & 0x20040000000L) != 0L)
            return 15;
         if ((active0 & 0x1fb94fa3c000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 15;
         }
         return -1;
      case 6:
         if ((active0 & 0x153900a3c000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 6;
            }
            return 15;
         }
         if ((active0 & 0xa804f000000000L) != 0L)
            return 15;
         return -1;
      case 7:
         if ((active0 & 0x10000000000000L) != 0L)
            return 15;
         if ((active0 & 0x143900a3c000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 15;
         }
         return -1;
      case 8:
         if ((active0 & 0x300003c000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 8;
            }
            return 15;
         }
         if ((active0 & 0x140900a00000000L) != 0L)
            return 15;
         return -1;
      case 9:
         if ((active0 & 0x300003c000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 15;
         }
         return -1;
      case 10:
         if ((active0 & 0x3000024000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 10;
            return 15;
         }
         if ((active0 & 0x18000000L) != 0L)
            return 15;
         return -1;
      case 11:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 11;
            return 15;
         }
         if ((active0 & 0x24000000L) != 0L)
            return 15;
         return -1;
      case 12:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
            return 15;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 15;
         return -1;
      case 13:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 13;
            return 15;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 14;
            return 15;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 15;
            return 15;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 16;
            return 15;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 17;
            return 15;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000000000L) != 0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 9);
      case 10:
         return jjStartNfaWithStates_0(0, 3, 9);
      case 12:
         return jjStartNfaWithStates_0(0, 5, 9);
      case 13:
         return jjStartNfaWithStates_0(0, 4, 9);
      case 33:
         return jjStartNfaWithStates_0(0, 15, 9);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 40:
         return jjStartNfaWithStates_0(0, 11, 9);
      case 41:
         return jjStartNfaWithStates_0(0, 12, 9);
      case 42:
         return jjStartNfaWithStates_0(0, 8, 9);
      case 43:
         return jjStartNfaWithStates_0(0, 6, 9);
      case 45:
         return jjStartNfaWithStates_0(0, 7, 9);
      case 46:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 60:
         return jjStartNfaWithStates_0(0, 16, 9);
      case 61:
         return jjStartNfaWithStates_0(0, 10, 9);
      case 62:
         return jjStartNfaWithStates_0(0, 17, 9);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 25);
      case 94:
         return jjStartNfaWithStates_0(0, 9, 9);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1010e000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40000400000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x148a00c00000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xa0001000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1c200000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80020000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3000100000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x280000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffffL);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 9);
         break;
      case 46:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 91:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1008e400000000L, active1, 0x8020L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30010L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3a5023c000000L, active1, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x148000800400000L, active1, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0021000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4500000200000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x808L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1780L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 124:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 9);
         break;
      case 126:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8a40040000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0xe01c000000L, active1, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5780L);
      case 70:
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 15);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0001000000000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x13000400000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x140180800000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x8020L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000000L, active1, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020000000000L, active1, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2040L);
      case 86:
      case 118:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 15);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 15);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x140000800000000L, active1, 0x8000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xb0001000000000L, active1, 0x4000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200000000L, active1, 0x30000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x3020000000000L, active1, 0x800L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x40L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x8a00000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4005c000000L, active1, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2030L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1003L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x500L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x280L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80021c000000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x1040L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0101000000000L, active1, 0x30020L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000800000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x46000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 15);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 15);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000L, active1, 0x1L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x8002L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6280L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x500L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x1c000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0045000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x3100000000000L, active1, 0x20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x220000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xd02L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000a800000000L, active1, 0xa000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 15);
         break;
      case 79:
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 15);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x2c0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4014L);
      case 126:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(6, 64);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000010000000L, active1, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x800cL);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x3100004000000L, active1, 0x12c0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 15);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 15);
         break;
      case 79:
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x30000L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000000000000L, active1, 0x4500L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 15);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x30000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x140000800000000L, active1, 0x4000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x500L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8280L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x3100000000000L, active1, 0x10L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0x800200000000L, active1, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xcL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000004000000L, active1, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000020000000L, active1, 0x8000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000L, active1, 0x2500L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L, active1, 0x2L);
      case 79:
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 15);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x30000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x140000000000000L, active1, 0x808L);
      case 126:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4050L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x140000000000000L, active1, 0L);
      case 36:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(9, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(9, 70);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(9, 78);
         break;
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000004000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000030000000L, active1, 0xa280L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x21508L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      case 126:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(10, 66);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0xa002L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L, active1, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 15);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x280L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x128L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(11, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(11, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(11, 72);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 26, 15);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 15);
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x22000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1b082L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(12, 65);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(12, 71);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(12, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(12, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(12, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(12, 80);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 48, 15);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(12, 55);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200L);
      case 126:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(13, 81);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(14, 74);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(14, 56);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(15, 73);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(16, 75);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(17, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 49, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(19, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffbfe6ffffffffL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(9); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 15:
                  if ((0xffffbfe6ffffffffL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(9); }
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if ((0xffffbfe6ffffffffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 46)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(14); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xbfffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(9); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 15:
                  if ((0xbfffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(9); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 9:
                  if ((0xbfffffffd7fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(9); }
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 12, 13, 4, 5, 8, 5, 7, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\53", "\55", "\52", "\136", "\75", "\50", 
"\51", "\46\46", "\174\174", "\41", "\74", "\76", "\56\56", "\56", "\44\176", null, 
null, "\100\133", "\43\133", "\135", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GramaticaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GramaticaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xdbffffffffffffc1L, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[15];
    private final int[] jjstateSet = new int[2 * 15];

    
    protected char curChar;
}
