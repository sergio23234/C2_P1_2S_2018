/* GramaticaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
import java.util.Stack;
import java.io.BufferedReader;
import java.io.FileReader;

/** Token Manager. */
@SuppressWarnings("unused")public class GramaticaTokenManager implements GramaticaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1cfeL) != 0L)
            return 10;
         if ((active0 & 0xfffffffe30000L) != 0L)
         {
            jjmatchedKind = 74;
            return 16;
         }
         if ((active0 & 0x300L) != 0L)
         {
            jjmatchedKind = 80;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0x300L) != 0L)
            return 10;
         if ((active0 & 0xfffffffe30000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0xffffff3e00000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0xc030000L) != 0L)
            return 16;
         return -1;
      case 3:
         if ((active0 & 0xfddfff3e00000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0x220000000000L) != 0L)
            return 16;
         return -1;
      case 4:
         if ((active0 & 0xfd8b7d3e00000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 4;
            }
            return 16;
         }
         if ((active0 & 0x54820000000L) != 0L)
            return 16;
         return -1;
      case 5:
         if ((active0 & 0xfdca7d1e00000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
            return 16;
         }
         if ((active0 & 0x1002000000L) != 0L)
            return 16;
         return -1;
      case 6:
         if ((active0 & 0xa9c8051e00000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 6;
            }
            return 16;
         }
         if ((active0 & 0x5402780000000L) != 0L)
            return 16;
         return -1;
      case 7:
         if ((active0 & 0x800000000000L) != 0L)
            return 16;
         if ((active0 & 0xa1c8051e00000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
            return 16;
         }
         return -1;
      case 8:
         if ((active0 & 0xa048050000000L) != 0L)
            return 16;
         if ((active0 & 0x180001e00000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 8;
            }
            return 16;
         }
         return -1;
      case 9:
         if ((active0 & 0x180001e00000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
            return 16;
         }
         return -1;
      case 10:
         if ((active0 & 0x180001200000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 10;
            return 16;
         }
         if ((active0 & 0xc00000L) != 0L)
            return 16;
         return -1;
      case 11:
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 11;
            return 16;
         }
         if ((active0 & 0x1200000L) != 0L)
            return 16;
         return -1;
      case 12:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 12;
            return 16;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 16;
         return -1;
      case 13:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 13;
            return 16;
         }
         return -1;
      case 14:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 14;
            return 16;
         }
         return -1;
      case 15:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 15;
            return 16;
         }
         return -1;
      case 16:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 16;
            return 16;
         }
         return -1;
      case 17:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 17;
            return 16;
         }
         return -1;
      case 18:
         if ((active0 & 0x100000000000L) != 0L)
            return 16;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 10, 10);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 40:
         return jjStartNfaWithStates_0(0, 6, 10);
      case 41:
         return jjStartNfaWithStates_0(0, 7, 10);
      case 42:
         return jjStartNfaWithStates_0(0, 3, 10);
      case 43:
         return jjStartNfaWithStates_0(0, 1, 10);
      case 45:
         return jjStartNfaWithStates_0(0, 2, 10);
      case 46:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 60:
         return jjStartNfaWithStates_0(0, 11, 10);
      case 61:
         return jjStartNfaWithStates_0(0, 5, 10);
      case 62:
         return jjStartNfaWithStates_0(0, 12, 10);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 20);
      case 94:
         return jjStartNfaWithStates_0(0, 4, 10);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x808700000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000020000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xa450060000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x5000080000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xe10000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4001000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x180008000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x14000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0xfff0000000000000L, 0x3fL);
      case 65279:
         return jjStopAtPos(0, 70);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_0(active0, 0xfff0000000000000L, active1, 0x3fL);
      case 38:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 10);
         break;
      case 46:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x804720000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1d2811e00000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xa400040020000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5001080000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x228000010000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100452002000000L, active1, 0x30L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x700e00000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 16);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x25000080000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x980020000000L, active1, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0xa00c040000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000001000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800020010000000L, active1, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10201000000000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 16);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x700000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 16);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x18a000040000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x5800080000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20008010000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x7800181000000000L, active1, 0x5L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x450000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10002002e00000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000001000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000800000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40010e00000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L, active1, 0x4L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x45008080000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x30a000040000000L, active1, 0x2L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2300000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 16);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 16);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000000L, active1, 0x1L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80001000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0xe00000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x85002280000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100188000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000011000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20a000540000000L, active1, 0x30L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 16);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000000L, active1, 0x8L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2800000000000000L, active1, 0x6L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000800000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xd020000010000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x30L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x188000200000L, active1, 0xaL);
      case 76:
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 16);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 16);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 16);
         break;
      case 79:
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2c05000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000001000000L, active1, 0x4L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 16);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000040000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000000000L, active1, 0L);
      case 36:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(7, 52);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20a000040000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000000L, active1, 0x8L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2c00000000400000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0x2L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x188000000000L, active1, 0x30L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 16);
         return jjMoveStringLiteralDfa8_0(active0, 0x5000040010000000L, active1, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x30L);
      case 65:
      case 97:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 16);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000200000L, active1, 0x4L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000001000000L, active1, 0x1L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 16);
         return jjMoveStringLiteralDfa9_0(active0, 0x2800180000000000L, active1, 0x8L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 16);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x40a000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0xa000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x5000000000000000L, active1, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x2801000000200000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000001800000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x30L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8080000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(10, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(10, 58);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(10, 66);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000200000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2800000000000000L, active1, 0xaL);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000100000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 16);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 23, 16);
         return jjMoveStringLiteralDfa11_0(active0, 0x5080000001000000L, active1, 0x21L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0xaL);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8008000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 21, 16);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 16);
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0x1L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x2800000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x1100000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa12_0(active0, 0x1280000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(12, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(12, 57);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(12, 60);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 43, 16);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(12, 50);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L);
      case 126:
         return jjMoveStringLiteralDfa13_0(active0, 0x820000000000000L, active1, 0x1bL);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(13, 53);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(13, 59);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(13, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(13, 65);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(13, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(13, 68);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8001000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(14, 69);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(14, 51);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L);
      case 126:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(15, 62);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000L);
      case 126:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(16, 61);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      case 126:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(17, 63);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(17, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 44, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(19, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xbfffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffbfe6ffffcbffL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 16:
                  if ((0xffffbfe6ffffcbffL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 0:
                  if ((0x100001200L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 10:
                  if ((0xffffbfe6ffffcbffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 46)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(15); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xbfffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 16:
                  if ((0xbfffffffd7fffffeL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(2); }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 10:
                  if ((0xbfffffffd7fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 10:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(10); }
                  break;
               case 16:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(10); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 14, 5, 6, 9, 6, 8, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\53", "\55", "\52", "\136", "\75", "\50", "\51", "\46\46", "\174\174", 
"\41", "\74", "\76", "\56\56", "\56", "\44\57\176\44", null, null, "\100\133", 
"\43\133", "\135", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GramaticaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GramaticaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1b63fL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x1c0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[2 * 16];

    
    protected char curChar;
}
