/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAS = 1;
  /** RegularExpression Id. */
  int MEN = 2;
  /** RegularExpression Id. */
  int POR = 3;
  /** RegularExpression Id. */
  int ELV = 4;
  /** RegularExpression Id. */
  int IGU = 5;
  /** RegularExpression Id. */
  int PAI = 6;
  /** RegularExpression Id. */
  int PAF = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int NOT = 10;
  /** RegularExpression Id. */
  int NOR = 11;
  /** RegularExpression Id. */
  int MAY = 12;
  /** RegularExpression Id. */
  int DPUN = 13;
  /** RegularExpression Id. */
  int PUN = 14;
  /** RegularExpression Id. */
  int MOD = 15;
  /** RegularExpression Id. */
  int DIV = 16;
  /** RegularExpression Id. */
  int ARR = 17;
  /** RegularExpression Id. */
  int NCO = 18;
  /** RegularExpression Id. */
  int CORI = 19;
  /** RegularExpression Id. */
  int COR = 20;
  /** RegularExpression Id. */
  int R_fin = 21;
  /** RegularExpression Id. */
  int R_MIMG = 29;
  /** RegularExpression Id. */
  int R_MVID = 30;
  /** RegularExpression Id. */
  int R_MAUD = 31;
  /** RegularExpression Id. */
  int R_repro = 32;
  /** RegularExpression Id. */
  int R_OP = 33;
  /** RegularExpression Id. */
  int C_VF = 34;
  /** RegularExpression Id. */
  int C_SN = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int FALSE = 37;
  /** RegularExpression Id. */
  int R_OF = 38;
  /** RegularExpression Id. */
  int R_OI = 39;
  /** RegularExpression Id. */
  int R_CMIN = 40;
  /** RegularExpression Id. */
  int R_CMAX = 41;
  /** RegularExpression Id. */
  int R_CFIL = 42;
  /** RegularExpression Id. */
  int R_Text = 43;
  /** RegularExpression Id. */
  int R_Ente = 44;
  /** RegularExpression Id. */
  int R_Deci = 45;
  /** RegularExpression Id. */
  int R_Rang = 46;
  /** RegularExpression Id. */
  int R_Cond = 47;
  /** RegularExpression Id. */
  int R_Fech = 48;
  /** RegularExpression Id. */
  int R_Hora = 49;
  /** RegularExpression Id. */
  int R_FeHo = 50;
  /** RegularExpression Id. */
  int R_Selu = 51;
  /** RegularExpression Id. */
  int R_Selm = 52;
  /** RegularExpression Id. */
  int R_Nota = 53;
  /** RegularExpression Id. */
  int R_Mult = 54;
  /** RegularExpression Id. */
  int R_Calc = 55;
  /** RegularExpression Id. */
  int R_AgrI = 56;
  /** RegularExpression Id. */
  int R_AgrF = 57;
  /** RegularExpression Id. */
  int R_Cici = 58;
  /** RegularExpression Id. */
  int R_Cicf = 59;
  /** RegularExpression Id. */
  int R_tip = 60;
  /** RegularExpression Id. */
  int R_idp = 61;
  /** RegularExpression Id. */
  int R_eti = 62;
  /** RegularExpression Id. */
  int R_par = 63;
  /** RegularExpression Id. */
  int R_cal = 64;
  /** RegularExpression Id. */
  int R_apl = 65;
  /** RegularExpression Id. */
  int R_sug = 66;
  /** RegularExpression Id. */
  int R_res = 67;
  /** RegularExpression Id. */
  int R_req = 68;
  /** RegularExpression Id. */
  int R_rsm = 69;
  /** RegularExpression Id. */
  int R_rqm = 70;
  /** RegularExpression Id. */
  int R_prd = 71;
  /** RegularExpression Id. */
  int R_rep = 72;
  /** RegularExpression Id. */
  int R_mul = 73;
  /** RegularExpression Id. */
  int R_lec = 74;
  /** RegularExpression Id. */
  int R_apa = 75;
  /** RegularExpression Id. */
  int R_pre = 76;
  /** RegularExpression Id. */
  int R_pos = 77;
  /** RegularExpression Id. */
  int ESPACIO = 78;
  /** RegularExpression Id. */
  int LETTER = 79;
  /** RegularExpression Id. */
  int INTEGER = 80;
  /** RegularExpression Id. */
  int DOUBLE = 81;
  /** RegularExpression Id. */
  int DIGIT = 82;
  /** RegularExpression Id. */
  int T_ID = 83;
  /** RegularExpression Id. */
  int T_MUL = 84;
  /** RegularExpression Id. */
  int T_Texto = 91;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int T_Texto1 = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"^\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"<\"",
    "\">\"",
    "\"..\"",
    "\".\"",
    "\"mod\"",
    "\"div\"",
    "\"@\"",
    "\"#\"",
    "\"[\"",
    "\"]\"",
    "\"@[/]@\"",
    "\"\\ufeff\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\u00a0\"",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\"Media_imagen\"",
    "\"Media_video\"",
    "\"Media_audio\"",
    "\"reproduccion\"",
    "\"Opcion\"",
    "\"V_F\"",
    "\"S_N\"",
    "\"verdadero\"",
    "\"falso\"",
    "\"Finalizar\"",
    "\"Iniciar\"",
    "\"cad_min\"",
    "\"cad_max\"",
    "\"cad_fila\"",
    "\"Texto\"",
    "\"Entero\"",
    "\"Decimal\"",
    "\"Rango\"",
    "\"Condicion\"",
    "\"Fecha\"",
    "\"Hora\"",
    "\"FechaHora\"",
    "\"Seleccion_uno\"",
    "\"Seleccion_multiples\"",
    "\"Nota\"",
    "\"Fichero\"",
    "\"Calcular\"",
    "\"Iniciar agrupacion\"",
    "\"Finalizar agrupacion\"",
    "\"Iniciar Ciclo\"",
    "\"Finalizar Ciclo\"",
    "\"@[tipo]@\"",
    "\"@[idpregunta]@\"",
    "\"@[etiqueta]@\"",
    "\"@[parametro]@\"",
    "\"@[calculo]@\"",
    "\"@[aplicable]@\"",
    "\"@[sugerir]@\"",
    "\"@[restringir]@\"",
    "\"@[requerido]@\"",
    "\"@[restringirmsn]@\"",
    "\"@[requeridomsn]@\"",
    "\"@[predeterminado]@\"",
    "\"@[repeticion]@\"",
    "\"@[multimedia]@\"",
    "\"@[lectura]@\"",
    "\"@[apariencia]@\"",
    "\"@[codigo_pre]@\"",
    "\"@[codigo_post]@\"",
    "<ESPACIO>",
    "<LETTER>",
    "<INTEGER>",
    "<DOUBLE>",
    "<DIGIT>",
    "<T_ID>",
    "<T_MUL>",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "\"\\ufeff\"",
    "\"@\\\"@\"",
    "<token of kind 92>",
  };

}
